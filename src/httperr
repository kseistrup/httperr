#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
"""
Usage: httperr [OPTIONS] [STATUS [STATUS …]]

Positional arguments:
  STATUS           HTTP status code/pattern

Optional arguments:
  -h, --help       show this help message and exit
  -v, --version    show version information and exit
  -c, --copyright  show copying policy and exit
  -l, --list       list all recognized status codes
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

from __future__ import print_function, unicode_literals

import sys
import os
import argparse
import re

# Python 2.7+ needed for dictionary comprehension
if sys.version_info < (2, 7):
    print(
        'Python 2.7+ needed, found Python {}.{}'.format(*sys.version_info[:2]),
        file=sys.stderr
    )
    sys.exit(1)

try:
    if sys.version_info < (3, 0):
        from httplib import responses
    else:
        from http.client import responses
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, ModuleNotFoundError, NameError, Error):
    pass

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__revision__ = '2018-07-30'
__version__ = '0.4.3 ({})'.format(__revision__)
__copyright__ = """\
httperr {}
Copyright © 2012−18 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.

Fork me on Github: https://github.com/kseistrup/httperr
   or Scuttlebutt: ssb://%YEIs8rL2yaJKd/ob68o9dait3yj+m6tw8tAyOs3hgus=.sha256
""".format(__version__)

RESPONSES = {
    str(int(code)): desc for (code, desc) in responses.items()
}
# https://developer.twitter.com/en/docs/basics/response-codes
if '420' not in RESPONSES:
    # It is hard to see how this is different from
    # 429 Too many requests
    RESPONSES['420'] = 'Enhance your calm'
# http://www.451unavailable.org/
if '451' not in RESPONSES:
    RESPONSES['451'] = 'Unavailable for legal reasons'
# A non-standard status code introduced by nginx for the case when
# a client closes the connection while nginx is processing the request.
if '499' not in RESPONSES:
    RESPONSES['499'] = 'Client closed request'
# This status code is not specified in any RFCs, but is used by some
# HTTP proxies to signal a network connect timeout behind the proxy to
# a client in front of the proxy.
if '599' not in RESPONSES:
    RESPONSES['599'] = 'Network connect timeout error'


def reformat(old):
    """Get rid of ugly Title Case"""
    elms = old.split(None, 1)
    if elms[0] not in ('HTTP', 'OK', 'Request-URI'):
        return old.capitalize()
    if len(elms) == 1:
        return old
    return ' '.join((elms[0], elms[1].lower()))


def main(progname='httperr'):
    """Main entry point"""
    (stdin, stderr) = (sys.stdin, sys.stderr)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/' + __version__,
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    parser.add_argument('-l', '--list', action='store_true',
                        help='list all recognized status codes')
    parser.add_argument('STATUS', nargs='*', help='HTTP status code/pattern')

    args = parser.parse_args()

    if args.list:
        statuses = set([r'^\d{3}'])
        cache = RESPONSES.copy()
    else:
        statuses = set(args.STATUS or stdin.read().split())
        cache = {}

    return_code = 0

    def error(message, blame):
        """Print an error message to stderr"""
        print('{1}\t{0}'.format(message, blame), file=stderr)

    def collapse(text):
        """Convert all occurrences of 1+ whitespace to 1 SPACE"""
        return ' '.join(text.split())

    for status in statuses:
        status = collapse(status)
        if not status:
            continue
        if status.isdigit() and len(status) == 3:
            desc = RESPONSES.get(status, None)
            if desc is None:
                error('Unrecognized status code', status)
                return_code = 1
                continue
            cache[status] = desc
        else:
            pattern = re.compile(status, re.IGNORECASE)
            found = False
            for (code, desc) in RESPONSES.items():
                if pattern.search(code) is None:
                    if pattern.search(desc) is None:
                        continue
                cache[code] = desc
                found = True
            if not found:
                error('Unrecognized pattern', status)
                return_code = 1

    for code in sorted(cache.keys()):
        print('{0}\t{1}'.format(code, reformat(cache[code])))

    return return_code


if __name__ == '__main__':
    sys.exit(main(os.path.basename(sys.argv[0])))

# eof
